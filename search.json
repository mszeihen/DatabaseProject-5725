[
  {
    "objectID": "erEnglish.html",
    "href": "erEnglish.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "** 1. A Player has atleast one or many Characters:**\n\nA Player can own one or multiple Characters.\nA Character can only belong to one Player.\n\n** 2. A Character belongs to only one Class:**\n\nA Character is associated with one Class (e.g., Fighter, Wizard).\nA Class can be associated with many Characters.\n\n** 3. A Character belongs to only one Race:**\n\nA Character is associated with one Race (e.g., Human, Elf).\nA Race can be associated with many Characters.\n\n** 4. A Character participates in zero to many Events:**\n\nA Character can be involved none or multiple Events.\nAn Event can involve many Characters.\n\n** 5. A Player earns many Achievements:**\n\nA Player can earn zero or multiple Achievements.\nAn Achievement can be earned by many Players.\n\n** 6. A Character equips zero or many Items:**\n\nA Character can equip multiple Items (e.g., weapons, armor).\nAn Item can be equipped by many Characters.\n\n** 7. An NPC belongs to one Faction:**\n\nAn NPC (Non-Player Character) belongs to one Faction.\nA Faction can have multiple NPCs.\n\n** 8. An NPC can be in One or More Locations:**\n\nAn NPC (Non-Player Character) belongs to one Location.\nA Location can have zero or more NPCs.\n\n** 9. A NPC belongs to one Class:**\n\nA NPC belong belongs to one Class (e.g., Wizard, warrior).\nA Class can classify multiple NPC.\n\n** 10. A NPC belongs to one Race:**\n\nA NPC belongs to one Race (e.g., Dragon, Goblin).\nA Race can be assigned to many NPC.\n\n** 11. A Monster is a subtype of a NPC:**\n\nA Monster is an agressive NPC.\nA monster correspoonds to an NPC, but not every NPC is a monster.\n\n** 12. A Boss is a subtype of a Monster:**\n\nA Boss is a special type of Monster that has unique attributes like fight phases or lair.\nEach Boss corresponds to one Monster, but not every Monster is a Boss.\n\n** 13. A Class teaches many Spells:**\n\nA Class can teach multiple Spells (e.g., Wizards teach Fireball, Lightning Bolt).\nA Spell can be taught by many Classes.\n\n** 14. A Character can fight many Monsters:**\n\nA Character can fight multiple Monsters.\nA Monster can fight many Characters.\n\n** 15. An Event involves many Characters:**\n\nA Character can participate in multiple Events.\nAn Event can involve multiple Characters."
  },
  {
    "objectID": "Phase4.html",
    "href": "Phase4.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "Map each entity and relationship to proper tables.\nDocument the schema details in your report. \n\n\nTHis is an example for table creations and associated documentation\nCREATE TABLE Plant\n(\n\nPlantID SMALLINT UNSIGNED PRIMARY KEY,\n\nPlantName VARCHAR (50) NOT NULL,\n\nPlantLocation VARCHAR (50) NOT NULL,\n\nOperationStatus VARCHAR (50) NOT NULL\n);\nTable Description This table stores basic information about individual plants, such as their name, location, and currentoperational status.\nPlantID: A small unsigned integer that uniquely identifies a plant. This is theprimary keyof the table,meaning each PlantID must be unique and non-null. As it’s UNSIGNED, it can only store positive values (0to 65,535).\nPlantName: A variable-length string (up to 50 characters) representing the name of the plant. This field ismarked NOT NULL, so every plant must have a name.\nPlantLocation: A variable-length string (up to 50 characters) that indicates the physical or geographicallocation of the plant. This is also a NOT NULL field, meaning each plant must have a known location.\nOperationStatus: A variable-length string (up to 50 characters) indicating the current operational state ofthe plant. This field is also NOT NULL. The table doesnotcurrently include any foreign keys, but it could be linked to other tables (like companyregions or statuses) depending on how the broader database is designed. There are no duplicate rules orrelational constraints in this version beyond the primary key on PlantID.\n ## Insert Sample Data (David Jacob)\n\nThis is an example of Values being added to associated table\nINSERT INTO Plant\nVALUES(100, \"Sagali\", \"Texas\", \"Mining\"),\n\n      (200, \"Tema\", \"Atlanta\", \"Refinery\"),\n\n      (300, \"Mashda\", \"New York\", \"Cannary\"),\n\n      (400, \"Segal\", \"Washington\", \"Mixer\"),\n\n      (500, \"Pinto\", \"Pensacola\", \"Grinder\");\n\n\n\nPopulate each table with at least five records.\nInclude a snapshot of the data entries in your submission."
  },
  {
    "objectID": "Phase4.html#create-tables-david-jacob",
    "href": "Phase4.html#create-tables-david-jacob",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "Map each entity and relationship to proper tables.\nDocument the schema details in your report. \n\n\nTHis is an example for table creations and associated documentation\nCREATE TABLE Plant\n(\n\nPlantID SMALLINT UNSIGNED PRIMARY KEY,\n\nPlantName VARCHAR (50) NOT NULL,\n\nPlantLocation VARCHAR (50) NOT NULL,\n\nOperationStatus VARCHAR (50) NOT NULL\n);\nTable Description This table stores basic information about individual plants, such as their name, location, and currentoperational status.\nPlantID: A small unsigned integer that uniquely identifies a plant. This is theprimary keyof the table,meaning each PlantID must be unique and non-null. As it’s UNSIGNED, it can only store positive values (0to 65,535).\nPlantName: A variable-length string (up to 50 characters) representing the name of the plant. This field ismarked NOT NULL, so every plant must have a name.\nPlantLocation: A variable-length string (up to 50 characters) that indicates the physical or geographicallocation of the plant. This is also a NOT NULL field, meaning each plant must have a known location.\nOperationStatus: A variable-length string (up to 50 characters) indicating the current operational state ofthe plant. This field is also NOT NULL. The table doesnotcurrently include any foreign keys, but it could be linked to other tables (like companyregions or statuses) depending on how the broader database is designed. There are no duplicate rules orrelational constraints in this version beyond the primary key on PlantID.\n ## Insert Sample Data (David Jacob)\n\nThis is an example of Values being added to associated table\nINSERT INTO Plant\nVALUES(100, \"Sagali\", \"Texas\", \"Mining\"),\n\n      (200, \"Tema\", \"Atlanta\", \"Refinery\"),\n\n      (300, \"Mashda\", \"New York\", \"Cannary\"),\n\n      (400, \"Segal\", \"Washington\", \"Mixer\"),\n\n      (500, \"Pinto\", \"Pensacola\", \"Grinder\");\n\n\n\nPopulate each table with at least five records.\nInclude a snapshot of the data entries in your submission."
  },
  {
    "objectID": "Phase4.html#write-execute-complex-queriesdavid-jacob",
    "href": "Phase4.html#write-execute-complex-queriesdavid-jacob",
    "title": "COP-5725---Group-Project",
    "section": "Write & Execute Complex Queries(David Jacob)",
    "text": "Write & Execute Complex Queries(David Jacob)\n(Formulate and run at least five meaningful SQL queries that involve 3–4 table joins.)\n\n\nEnsure all tables are actively used—none should be redundant.\nFor each query:\n\nDescribe the goal in plain English\nShow the SQL code.\nPresent the query results - NOTE will add after init_database.py is completed\n\n\n\n\nLists all Characters with their class, race, and equiment\n\nNeed a reason or story for the use of this query: i.e.\nquote from demo paper\n” A customer reported that his company fired him for purchasing a bad product from us. The qualitycontrol manager analysed the situation and suggested the product might have been produced usingmaterials of less time life. Hence, we want to find all products and their related materials producedfor this situation. ”\n\n    SELECT \n        c.Name AS CharacterName,\n        cl.ClassName,\n        r.RaceName,\n        e.Name AS EquipmentName,\n        e.Type AS EquipmentType,\n        e.Bonus\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    JOIN Race r ON c.charRaceID = r.RaceID\n    JOIN CharacterEquipment ce ON c.CharacterID = ce.CharacterID\n    JOIN Equipment e ON ce.EquipmentID = e.EquipmentID\n    WHERE e.Equipped = TRUE\n    ORDER BY c.Name, e.Name;\n\n\n\n\n\n\n\n\n\n\n\nCharacterName\nClassName\nRaceName\nEquipmentName\nEquipmentType\nBonus\n\n\n\n\nname 1\nwizard\nHigh elf\nBlight caller\nsword\nNone\n\n\n\n\n\nFinds all spells available to a character\n    SELECT \n        c.Name AS CharacterName,\n        cl.ClassName,\n        s.Name AS SpellName,\n        s.Level,\n        s.School\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    JOIN ClassSpell cs ON cl.ClassID = cs.ClassID\n    JOIN Spell s ON cs.SpellID = s.SpellID\n    ORDER BY c.Name, s.Level;\n\n\n\nCharacterName\nClassName\nSpellName\nLevel\nschool\n\n\n\n\nname 1\nwizard\nFire ball\n5\nFire\n\n\n\n\n\nLists all players and what events they have participated in.\n    SELECT\n        p.UserName,\n        c.Name AS CharacterName,\n         e.Name AS EventName,\n        e.Date AS EventDate\n    FROM Player p\n    JOIN PlayerCharacter pc ON p.PlayerID = pc.PlayerID\n    JOIN Character c ON pc.CharacterID = c.CharacterID\n    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID\n    JOIN Event e ON ce.EventID = e.EventID\n    ORDER BY p.UserName, e.Date DESC;\n\n\n\nUserName\nCharacterName\nEventName\nEventDate\n\n\n\n\nMichael\nParzival\n“The Great Key Chase”\n‘2025-01-01’\n\n\n\n\n\nAverage level of XP per class\n    SELECT\n        cl.ClassName,\n        AVG(c.Level) AS AvgLevel,\n        SUM(c.XP) AS TotalXP\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    GROUP BY cl.ClassName\n    ORDER BY AvgLevel DESC;\n\n\nwon battles by character\n    SELECT\n        c.Name AS CharacterName,\n        COUNT(DISTINCT e.EventID) AS BattlesWon\n    FROM Character c\n    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID\n    JOIN Event e ON ce.EventID = e.EventID\n    WHERE e.Type = 'Battle'\n    AND e.Result = 'Won'\n    GROUP BY c.Name\n    ORDER BY BattlesWon DESC;"
  },
  {
    "objectID": "Phase4.html#show-reverse-engineered-diagram-michael-zeihen",
    "href": "Phase4.html#show-reverse-engineered-diagram-michael-zeihen",
    "title": "COP-5725---Group-Project",
    "section": "Show Reverse-Engineered Diagram (Michael Zeihen) ",
    "text": "Show Reverse-Engineered Diagram (Michael Zeihen) \n\nUse reverse engineering to visualize the implemented schema.\nAdd the generated ER diagram to your report to confirm alignment between design and implementation."
  },
  {
    "objectID": "queriesSQL.html",
    "href": "queriesSQL.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "Query: Get the highest-level characters for each class.\n\nSELECT c.Name AS CharacterName, cl.ClassName, MAX(ch.Level) AS HighestLevel\nFROM Character ch\nJOIN Class cl ON ch.charClassID = cl.ClassID\nGROUP BY cl.ClassName\nORDER BY cl.ClassName;\n\nQuery: Get the most commonly equipped item across all characters.\n\nSELECT e.Name AS ItemName, COUNT(ce.EquipmentID) AS EquipCount\nFROM Equipment e\nJOIN CharacterEquipment ce ON e.EquipmentID = ce.EquipmentID\nGROUP BY e.Name\nORDER BY EquipCount DESC\nLIMIT 1;\n\nQuery: Get the total XP gained by players who participated in a specific event.\n\nSELECT p.Name AS PlayerName, SUM(e.XP) AS TotalXP\nFROM Player p\nJOIN CharacterEvent ce ON p.PlayerID = ce.PlayerID\nJOIN Event ev ON ce.EventID = ev.EventID\nJOIN Character c ON p.PlayerID = c.PlayerID\nGROUP BY p.Name\nHAVING ev.EventID = 1\nORDER BY TotalXP DESC;\n\nQuery: Get the list of NPCs that belong to a specific faction and their location.\n\nSELECT Name AS NPCName, Location\nFROM NPC\nWHERE Faction = ‘Thieves Guild’\nORDER BY Location;\n\nQuery: Find the top 3 players who have earned the most achievements, along with their total XP reward.\n\nSELECT p.Name AS PlayerName, COUNT(pa.AchievementID) AS AchievementsEarned, SUM(a.XPReward) AS TotalXPReward\nFROM Player p\nJOIN PlayerAchievement pa ON p.PlayerID = pa.PlayerID\nJOIN Achievement a ON pa.AchievementID = a.AchievementID\nGROUP BY p.Name\nORDER BY AchievementsEarned DESC, TotalXPReward DESC\nLIMIT 3;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COP-5725—Group-Project",
    "section": "",
    "text": "Adventures within the Database Dungeon"
  },
  {
    "objectID": "index.html#player-strong-entity",
    "href": "index.html#player-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.1 👥 Player (Strong Entity)",
    "text": "2.1 👥 Player (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nPlayerID\nINT (PK)\nUnique player ID\n\n\nName\nVARCHAR\nPlayer character name\n\n\nUserName\nVARCHAR\nPlayer’s login or nickname\n\n\nCharacterID\nINT (FK)\nLinks to Characters\n\n\n\n\nPlayerCharacter (one-to-many):\n\nPlayerID\nCharacterID"
  },
  {
    "objectID": "index.html#character-strong-entity",
    "href": "index.html#character-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.2 📌 Character (Strong Entity)",
    "text": "2.2 📌 Character (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nCharacterID\nINT (PK)\nUnique player ID\n\n\nName\nVARCHAR\nPlayer character name\n\n\nLevel\nINT\nCharacter level\n\n\ncharClassID\nINT (FK)\nLinks to Class\n\n\nXP\nINT\nExperience points\n\n\ncharRaceID\nint (FK)\nLink to Race:Elf, Human, etc.\n\n\nHP\nINT\nCurrent HP\n\n\nMana\nINT\nCurrent mana or spell slots\n\n\nAlignment\nVARCHAR\nLawful Good, Chaotic Evil…\n\n\n\n\nCharacterClass (Many-to-one(N:1)):\n\ncharClassID\nClassID\n\nCharacterRace (Many-to-one(N:1)):\n\ncharRaceID\nRaceID"
  },
  {
    "objectID": "index.html#race-strong-entity",
    "href": "index.html#race-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.3 🧙 Race (Strong Entity)",
    "text": "2.3 🧙 Race (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nRaceID\nINT (PK)\nUnique race ID\n\n\nRaceName\nVARCHAR\nHuman, elf, etc.\n\n\nbonusStat\nVARCHAR\ne.g., Str for Ogre\n\n\nDescription\nTEXT\nRace description"
  },
  {
    "objectID": "index.html#class-strong-entity",
    "href": "index.html#class-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.4 🧙 Class (Strong Entity)",
    "text": "2.4 🧙 Class (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nClassID\nINT (PK)\nUnique class ID\n\n\nClassName\nVARCHAR\nWizard, Fighter, etc.\n\n\nHitDie\nINT\ne.g., 6, 8, 10\n\n\nPrimaryStat\nVARCHAR\ne.g., INT for Wizard\n\n\nDescription\nTEXT\nClass description"
  },
  {
    "objectID": "index.html#spell-strong-entity",
    "href": "index.html#spell-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.5 ✨ Spell (Strong Entity)",
    "text": "2.5 ✨ Spell (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nSpellID\nINT (PK)\nUnique spell ID\n\n\nName\nVARCHAR\nSpell name\n\n\nLevel\nINT\nSpell level (0–9)\n\n\nSchool\nVARCHAR\nAbjuration, Necromancy, etc.\n\n\nEffect\nTEXT\nWhat it does\n\n\nCastingTime\nVARCHAR\nAction, Bonus, etc.\n\n\nDuration\nVARCHAR\nInstant, 1 hour, etc.\n\n\n\n\nClassSpell(Weak Entity) (many-to-one(N:1)):\n\nClassID\nSpellID"
  },
  {
    "objectID": "index.html#monster-weak-entity",
    "href": "index.html#monster-weak-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.6 🧟 Monster (Weak Entity)",
    "text": "2.6 🧟 Monster (Weak Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nMonsterID\nINT (PK)\nUnique monster ID\n\n\nName\nVARCHAR\nName of the creature\n\n\nraceID\nINT (FK)\nRace of the creature\n\n\nclassID\nINT (FK)\nName of the creature\n\n\nCR\nFLOAT\nChallenge Rating\n\n\nHP\nINT\nHit Points\n\n\nAC\nINT\nArmor Class\n\n\nType\nVARCHAR\nBeast, Fiend, Dragon, etc.\n\n\nXP\nINT\nXP granted on defeat\n\n\n\n\nMonsterClass(Weak Entity) (Many-to-one(N:1)):\n\nclassID\nClassID\n\nMonsterRace(Weak Entity) (Many-to-one(N:1)):\n\nRaceID\n2.7 RaceID"
  },
  {
    "objectID": "index.html#boss-weak-entity-subtype-to-monster",
    "href": "index.html#boss-weak-entity-subtype-to-monster",
    "title": "COP-5725—Group-Project",
    "section": "2.8 👑 Boss (Weak Entity) (Subtype to Monster)",
    "text": "2.8 👑 Boss (Weak Entity) (Subtype to Monster)\n\n\n\nField\nType\nDescription\n\n\n\n\nBossID\nINT (PK)\nUnique boss ID\n\n\nName\nVARCHAR\nBoss name\n\n\nMonsterID\nINT (FK)\nInherits from Monster\n\n\nPhaseCount\nINT\nNumber of fight phases\n\n\nLair\nVARCHAR\nLocation name\n\n\n\n\nbossMonster (One-to-Many(1:N)):\n\nMonsterID\nMonsterID"
  },
  {
    "objectID": "index.html#equipment-strong-entity",
    "href": "index.html#equipment-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.9 🗡️ Equipment (Strong Entity)",
    "text": "2.9 🗡️ Equipment (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nEquipmentID\nINT (PK)\nUnique ID\n\n\nQuantity\nINT\nHow many\n\n\nEquiped\nBool\nIs Equiped\n\n\nName\nVARCHAR\nItem name\n\n\nType\nVARCHAR\nWeapon, Armor, Ring, etc.\n\n\nBonus\nVARCHAR\n“+1 STR”, “AC +2”, etc.\n\n\nRarity\nVARCHAR\nCommon, Rare, Legendary…\n\n\nDescription\nTEXT\nSpecial effects, flavor text\n\n\n\n\nCharacterEquipment(Weak Entity) (many-to-many):\n\ncharacterID\nEquipmentID"
  },
  {
    "objectID": "index.html#npc-strong-entity",
    "href": "index.html#npc-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.10 👥 NPC (Strong Entity)",
    "text": "2.10 👥 NPC (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nNPCID\nINT (PK)\nUnique NPC ID\n\n\nName\nVARCHAR\nCharacter name\n\n\nRole\nVARCHAR\nVendor, Questgiver, etc.\n\n\nFaction\nVARCHAR\nAffiliation or group\n\n\nLocation\nVARCHAR\nWhere they can be found"
  },
  {
    "objectID": "index.html#event-strong-entity",
    "href": "index.html#event-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.11 🎭 Event (Strong Entity)",
    "text": "2.11 🎭 Event (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nEventID\nINT (PK)\nUnique event ID\n\n\ndateEarned\nDATE\nDate Achievment Earned\n\n\nName\nVARCHAR\nEvent name\n\n\nDate\nDATE\nIn-game or real date\n\n\nDescription\nTEXT\nSummary of what occurred\n\n\n\n\ncharacterEvent(Weak Entity) (many-to-many):\n\ncharacterID\nEventID"
  },
  {
    "objectID": "index.html#achievement-strong-entity",
    "href": "index.html#achievement-strong-entity",
    "title": "COP-5725—Group-Project",
    "section": "2.12 🏆 Achievement (Strong Entity)",
    "text": "2.12 🏆 Achievement (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nAchievementID\nINT (PK)\nUnique ID\n\n\nName\nVARCHAR\n“Dragon Slayer”, etc.\n\n\nDescription\nTEXT\nHow it was earned\n\n\nXPReward\nINT\nOptional XP bonus\n\n\n\n\nPlayerAchievement(Weak Entity) (many-to-many):\n\nPlayerID\nAchievementID\n\n\n\n\nothers\n\nSales\nTrades\npotions\nweapons\nArmor\nPVP\nlocations\n\npossible quires\n\nfind what bosses character killed and get list of items from that boss he traded to another character\nfind what event(quest) gets the most exp with a sword or wand as reward that can only be used my mages and paladins"
  },
  {
    "objectID": "index.html#entity-relationship-diagram",
    "href": "index.html#entity-relationship-diagram",
    "title": "COP-5725—Group-Project",
    "section": "2.13 Entity Relationship Diagram",
    "text": "2.13 Entity Relationship Diagram\n\n2.13.1 Players and Characters\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    PLAYER ||--o{ PLAYER_CHARACTER : \"Has Character\"\n    CHARACTER ||--|| PLAYER_CHARACTER : \"Belongs to\"\n    CHARACTER ||--|| CLASS : \"Belongs to\"\n    CHARACTER ||--|| RACE : \"Belongs to\"\n    PLAYER ||--o{ PLAYER_Achievement : \"Earns\"\n    PLAYER_Achievement ||--o{ ACHIEVEMENT : \"Achievement\"\n\n\n\n\n\n\n\n\n2.13.2 Characters and Equipment\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    CHARACTER ||--o{ CHARACTER_EQUIPMENT : \"Equips\"\n    EQUIPMENT ||--o{ CHARACTER_EQUIPMENT : \"Equipped by\"\n\n\n\n\n\n\n\n\n2.13.3 NPCs and World\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    NPC ||--|{ NPC_Faction : \"Belongs to\"\n    NPC ||--o{ NPC_LOCATION : \"Located in\"\n    NPC ||--|| Class : \"Has Class\"\n    NPC ||--|| Race : \"Is Race\"\n    MONSTER ||--|{ NPC : \"Is Monster\"\n    BOSS ||--|{ MONSTER : \"Is Boss\"\n\n\n\n\n\n\n\n\n2.13.4 Spells and Combat Events\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    CLASS_SPELL ||--o{ SPELL : \"Teaches\"\n    CLASS ||--o{ CLASS_SPELL : \"Has Spells\"\n    CHARACTER ||--o{ MONSTER : \"Fights\"\n    CHARACTER ||--o{ CHARACTER_EVENT : \"Participates in\"\n    EVENT ||--o{ CHARACTER_EVENT : \"Involves\"\n    NPC }o--o{ EVENT : \"Can participate\""
  },
  {
    "objectID": "index.html#entity-specification-character-entitymichael-zeihen",
    "href": "index.html#entity-specification-character-entitymichael-zeihen",
    "title": "COP-5725—Group-Project",
    "section": "3.1 Entity Specification (Character Entity)(Michael Zeihen)",
    "text": "3.1 Entity Specification (Character Entity)(Michael Zeihen)\nThe Character entity is at the heart of the Dungeon and Dragons game database. Several Entities make up a full character, its stats, xp and the equipment it can wear. Characters get gear from monsters and bosses, bosses being a subtype of monsters. The Character entity has the following attributes:  CharacterID: some definition\nCharacterName: some name\n** add more stats and describe its cardinality**"
  },
  {
    "objectID": "index.html#relationships-structure-analysis-david-johansson",
    "href": "index.html#relationships-structure-analysis-david-johansson",
    "title": "COP-5725—Group-Project",
    "section": "3.2 Relationships & Structure Analysis (David johansson)",
    "text": "3.2 Relationships & Structure Analysis (David johansson)\nList all relationships along with their cardinalities (e.g., one-to-many, many-to-many) and participation ratios (total vs. partial participation).\n\n3.2.1 Cardinality Table (David Johansson)\n\n\n\n\n\n\n\n\nEntity\nCardinality\nDescription\n\n\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\n\n\n\n3.2.2 Participation Ratio Table (David Johansson)\n\n\n\n\n\n\n\n\nEntity\nParticipation\nDescription\n\n\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\n\n ## Identify and explain (Melanie Ortiz)\n\n\n3.2.3 Strong vs. weak entities\nOur database includes a variety of strong and weak entities to represent the complexity of the Dungeons & Dragons ecology.\nStrong Entities include:\nPlayer: Represents users of the system.\nCharacter: The core avatar controlled by a player.\nClass, Race, Spell, Equipment, NPC, Event, and Achievement: Each with independent existence and primary keys.\n\n\n3.2.4 Weak Entities include (Melanie Ortiz):\nMonster: Depends on Race and Class for full definition.\nBoss: A subtype of Monster, inheriting its attributes and adding boss-specific ones like PhaseCount and Lair.\nClassSpell: Links Class and Spell in a many-to-one relationship.\nCharacterEquipment: A many-to-many relationship between Character and Equipment.\nCharacterEvent: A many-to-many relationship between Character and Event.\nPlayerAchievement: A many-to-many relationship between Player and Achievement.\nThese weak entities rely on foreign keys and composite keys to maintain referential integrity and represent dependent relationships.\n\n\n3.2.5 Supertypes and subtypes with their distinguishing features. ( Melonie Ortiz)\nWe implemented a supertype-subtype relationship to model hierarchical data:\nSupertype: Monster\nSubtype: Boss\nThe Boss entity inherits all attributes from Monster (e.g., HP, AC, CR) and introduces additional attributes like PhaseCount and Lair. This structure allows us to distinguish between regular monsters and more complex boss encounters while maintaining a unified combat model."
  },
  {
    "objectID": "index.html#table-column-constraints-melonie-ortiz",
    "href": "index.html#table-column-constraints-melonie-ortiz",
    "title": "COP-5725—Group-Project",
    "section": "3.3 Table & Column Constraints (Melonie Ortiz)",
    "text": "3.3 Table & Column Constraints (Melonie Ortiz)\nTo ensure data integrity and enforce business rules, we applied the following constraints:\nPrimary Keys: Every entity has a unique identifier (e.g., CharacterID, PlayerID, SpellID).\nForeign Keys: Maintain relationships between entities (e.g., charClassID in Character references ClassID).\nNOT NULL: Ensures essential fields are always populated (e.g., Name, Level, XP).\nCHECK Constraints: Enforce valid ranges and logic (e.g., Level &gt;= 1, CR &gt;= 0, HP &gt;= 0).\nComposite Keys: Used in weak entities and many-to-many relationships (e.g., CharacterID + EquipmentID in CharacterEquipment).\nBoolean Constraints: For fields like Equipped in Equipment, ensuring values are either TRUE or FALSE.\nThese constraints were critical in supporting normalization, enforcing data consistency, and preparing the schema for implementation in MySQL.\n\n- Define all constraints such as:\n\n    - Primary and foreign keys\n\n    - NOT NULL requirements\n\n    - Unique constraints\n\n    - Referential integrity rules"
  },
  {
    "objectID": "index.html#normalization-goals",
    "href": "index.html#normalization-goals",
    "title": "COP-5725—Group-Project",
    "section": "3.4 Normalization Goals",
    "text": "3.4 Normalization Goals\nAll the tables are in 3NF. This was easily known because there were not many values inserted"
  },
  {
    "objectID": "index.html#create-tables-david-jacob",
    "href": "index.html#create-tables-david-jacob",
    "title": "COP-5725—Group-Project",
    "section": "4.1 Create Tables (David Jacob)",
    "text": "4.1 Create Tables (David Jacob)\n\n\nMap each entity and relationship to proper tables.\nDocument the schema details in your report. \n\n\nTHis is an example for table creations and associated documentation\nCREATE TABLE Plant\n(\n\nPlantID SMALLINT UNSIGNED PRIMARY KEY,\n\nPlantName VARCHAR (50) NOT NULL,\n\nPlantLocation VARCHAR (50) NOT NULL,\n\nOperationStatus VARCHAR (50) NOT NULL\n);\nTable Description This table stores basic information about individual plants, such as their name, location, and currentoperational status.\nPlantID: A small unsigned integer that uniquely identifies a plant. This is theprimary keyof the table,meaning each PlantID must be unique and non-null. As it’s UNSIGNED, it can only store positive values (0to 65,535).\nPlantName: A variable-length string (up to 50 characters) representing the name of the plant. This field ismarked NOT NULL, so every plant must have a name.\nPlantLocation: A variable-length string (up to 50 characters) that indicates the physical or geographicallocation of the plant. This is also a NOT NULL field, meaning each plant must have a known location.\nOperationStatus: A variable-length string (up to 50 characters) indicating the current operational state ofthe plant. This field is also NOT NULL. The table doesnotcurrently include any foreign keys, but it could be linked to other tables (like companyregions or statuses) depending on how the broader database is designed. There are no duplicate rules orrelational constraints in this version beyond the primary key on PlantID.\n ## Insert Sample Data (David Jacob)\n\nThis is an example of Values being added to associated table\nINSERT INTO Plant\nVALUES(100, \"Sagali\", \"Texas\", \"Mining\"),\n\n      (200, \"Tema\", \"Atlanta\", \"Refinery\"),\n\n      (300, \"Mashda\", \"New York\", \"Cannary\"),\n\n      (400, \"Segal\", \"Washington\", \"Mixer\"),\n\n      (500, \"Pinto\", \"Pensacola\", \"Grinder\");\n\n\n\nPopulate each table with at least five records.\nInclude a snapshot of the data entries in your submission."
  },
  {
    "objectID": "index.html#write-execute-complex-queriesdavid-jacob",
    "href": "index.html#write-execute-complex-queriesdavid-jacob",
    "title": "COP-5725—Group-Project",
    "section": "4.2 Write & Execute Complex Queries(David Jacob)",
    "text": "4.2 Write & Execute Complex Queries(David Jacob)\n(Formulate and run at least five meaningful SQL queries that involve 3–4 table joins.)\n\n\nEnsure all tables are actively used—none should be redundant.\nFor each query:\n\nDescribe the goal in plain English\nShow the SQL code.\nPresent the query results - NOTE will add after init_database.py is completed\n\n\n\n\n4.2.1 Lists all Characters with their class, race, and equiment\n\nNeed a reason or story for the use of this query: i.e.\nquote from demo paper\n” A customer reported that his company fired him for purchasing a bad product from us. The qualitycontrol manager analysed the situation and suggested the product might have been produced usingmaterials of less time life. Hence, we want to find all products and their related materials producedfor this situation. ”\n\n    SELECT \n        c.Name AS CharacterName,\n        cl.ClassName,\n        r.RaceName,\n        e.Name AS EquipmentName,\n        e.Type AS EquipmentType,\n        e.Bonus\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    JOIN Race r ON c.charRaceID = r.RaceID\n    JOIN CharacterEquipment ce ON c.CharacterID = ce.CharacterID\n    JOIN Equipment e ON ce.EquipmentID = e.EquipmentID\n    WHERE e.Equipped = TRUE\n    ORDER BY c.Name, e.Name;\n\n\n\n\n\n\n\n\n\n\n\nCharacterName\nClassName\nRaceName\nEquipmentName\nEquipmentType\nBonus\n\n\n\n\nname 1\nwizard\nHigh elf\nBlight caller\nsword\nNone\n\n\n\n\n\n4.2.2 Finds all spells available to a character\n    SELECT \n        c.Name AS CharacterName,\n        cl.ClassName,\n        s.Name AS SpellName,\n        s.Level,\n        s.School\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    JOIN ClassSpell cs ON cl.ClassID = cs.ClassID\n    JOIN Spell s ON cs.SpellID = s.SpellID\n    ORDER BY c.Name, s.Level;\n\n\n\nCharacterName\nClassName\nSpellName\nLevel\nschool\n\n\n\n\nname 1\nwizard\nFire ball\n5\nFire\n\n\n\n\n\n4.2.3 Lists all players and what events they have participated in.\n    SELECT\n        p.UserName,\n        c.Name AS CharacterName,\n         e.Name AS EventName,\n        e.Date AS EventDate\n    FROM Player p\n    JOIN PlayerCharacter pc ON p.PlayerID = pc.PlayerID\n    JOIN Character c ON pc.CharacterID = c.CharacterID\n    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID\n    JOIN Event e ON ce.EventID = e.EventID\n    ORDER BY p.UserName, e.Date DESC;\n\n\n\nUserName\nCharacterName\nEventName\nEventDate\n\n\n\n\nMichael\nParzival\n“The Great Key Chase”\n‘2025-01-01’\n\n\n\n\n\n4.2.4 Average level of XP per class\n    SELECT\n        cl.ClassName,\n        AVG(c.Level) AS AvgLevel,\n        SUM(c.XP) AS TotalXP\n    FROM Character c\n    JOIN Class cl ON c.charClassID = cl.ClassID\n    GROUP BY cl.ClassName\n    ORDER BY AvgLevel DESC;\n\n\n4.2.5 won battles by character\n    SELECT\n        c.Name AS CharacterName,\n        COUNT(DISTINCT e.EventID) AS BattlesWon\n    FROM Character c\n    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID\n    JOIN Event e ON ce.EventID = e.EventID\n    WHERE e.Type = 'Battle'\n    AND e.Result = 'Won'\n    GROUP BY c.Name\n    ORDER BY BattlesWon DESC;"
  },
  {
    "objectID": "index.html#show-reverse-engineered-diagram-michael-zeihen",
    "href": "index.html#show-reverse-engineered-diagram-michael-zeihen",
    "title": "COP-5725—Group-Project",
    "section": "4.3 Show Reverse-Engineered Diagram (Michael Zeihen) ",
    "text": "4.3 Show Reverse-Engineered Diagram (Michael Zeihen) \n\nUse reverse engineering to visualize the implemented schema.\nAdd the generated ER diagram to your report to confirm alignment between design and implementation."
  },
  {
    "objectID": "Entities.html",
    "href": "Entities.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "List of Entities"
  },
  {
    "objectID": "Entities.html#player-strong-entity",
    "href": "Entities.html#player-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "👥 Player (Strong Entity)",
    "text": "👥 Player (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nPlayerID\nINT (PK)\nUnique player ID\n\n\nName\nVARCHAR\nPlayer character name\n\n\nUserName\nVARCHAR\nPlayer’s login or nickname\n\n\nCharacterID\nINT (FK)\nLinks to Characters\n\n\n\n\nPlayerCharacter (one-to-many):\n\nPlayerID\nCharacterID"
  },
  {
    "objectID": "Entities.html#character-strong-entity",
    "href": "Entities.html#character-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "📌 Character (Strong Entity)",
    "text": "📌 Character (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nCharacterID\nINT (PK)\nUnique player ID\n\n\nName\nVARCHAR\nPlayer character name\n\n\nLevel\nINT\nCharacter level\n\n\ncharClassID\nINT (FK)\nLinks to Class\n\n\nXP\nINT\nExperience points\n\n\ncharRaceID\nint (FK)\nLink to Race:Elf, Human, etc.\n\n\nHP\nINT\nCurrent HP\n\n\nMana\nINT\nCurrent mana or spell slots\n\n\nAlignment\nVARCHAR\nLawful Good, Chaotic Evil…\n\n\n\n\nCharacterClass (Many-to-one(N:1)):\n\ncharClassID\nClassID\n\nCharacterRace (Many-to-one(N:1)):\n\ncharRaceID\nRaceID"
  },
  {
    "objectID": "Entities.html#race-strong-entity",
    "href": "Entities.html#race-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "🧙 Race (Strong Entity)",
    "text": "🧙 Race (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nRaceID\nINT (PK)\nUnique race ID\n\n\nRaceName\nVARCHAR\nHuman, elf, etc.\n\n\nbonusStat\nVARCHAR\ne.g., Str for Ogre\n\n\nDescription\nTEXT\nRace description"
  },
  {
    "objectID": "Entities.html#class-strong-entity",
    "href": "Entities.html#class-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "🧙 Class (Strong Entity)",
    "text": "🧙 Class (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nClassID\nINT (PK)\nUnique class ID\n\n\nClassName\nVARCHAR\nWizard, Fighter, etc.\n\n\nHitDie\nINT\ne.g., 6, 8, 10\n\n\nPrimaryStat\nVARCHAR\ne.g., INT for Wizard\n\n\nDescription\nTEXT\nClass description"
  },
  {
    "objectID": "Entities.html#spell-strong-entity",
    "href": "Entities.html#spell-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "✨ Spell (Strong Entity)",
    "text": "✨ Spell (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nSpellID\nINT (PK)\nUnique spell ID\n\n\nName\nVARCHAR\nSpell name\n\n\nLevel\nINT\nSpell level (0–9)\n\n\nSchool\nVARCHAR\nAbjuration, Necromancy, etc.\n\n\nEffect\nTEXT\nWhat it does\n\n\nCastingTime\nVARCHAR\nAction, Bonus, etc.\n\n\nDuration\nVARCHAR\nInstant, 1 hour, etc.\n\n\n\n\nClassSpell(Weak Entity) (many-to-one(N:1)):\n\nClassID\nSpellID"
  },
  {
    "objectID": "Entities.html#monster-weak-entity",
    "href": "Entities.html#monster-weak-entity",
    "title": "COP-5725---Group-Project",
    "section": "🧟 Monster (Weak Entity)",
    "text": "🧟 Monster (Weak Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nMonsterID\nINT (PK)\nUnique monster ID\n\n\nName\nVARCHAR\nName of the creature\n\n\nraceID\nINT (FK)\nRace of the creature\n\n\nclassID\nINT (FK)\nName of the creature\n\n\nCR\nFLOAT\nChallenge Rating\n\n\nHP\nINT\nHit Points\n\n\nAC\nINT\nArmor Class\n\n\nType\nVARCHAR\nBeast, Fiend, Dragon, etc.\n\n\nXP\nINT\nXP granted on defeat\n\n\n\n\nMonsterClass(Weak Entity) (Many-to-one(N:1)):\n\nclassID\nClassID\n\nMonsterRace(Weak Entity) (Many-to-one(N:1)):\n\nRaceID\nRaceID"
  },
  {
    "objectID": "Entities.html#boss-weak-entity-subtype-to-monster",
    "href": "Entities.html#boss-weak-entity-subtype-to-monster",
    "title": "COP-5725---Group-Project",
    "section": "👑 Boss (Weak Entity) (Subtype to Monster)",
    "text": "👑 Boss (Weak Entity) (Subtype to Monster)\n\n\n\nField\nType\nDescription\n\n\n\n\nBossID\nINT (PK)\nUnique boss ID\n\n\nName\nVARCHAR\nBoss name\n\n\nMonsterID\nINT (FK)\nInherits from Monster\n\n\nPhaseCount\nINT\nNumber of fight phases\n\n\nLair\nVARCHAR\nLocation name\n\n\n\n\nbossMonster (One-to-Many(1:N)):\n\nMonsterID\nMonsterID"
  },
  {
    "objectID": "Entities.html#equipment-strong-entity",
    "href": "Entities.html#equipment-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "🗡️ Equipment (Strong Entity)",
    "text": "🗡️ Equipment (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nEquipmentID\nINT (PK)\nUnique ID\n\n\nQuantity\nINT\nHow many\n\n\nEquiped\nBool\nIs Equiped\n\n\nName\nVARCHAR\nItem name\n\n\nType\nVARCHAR\nWeapon, Armor, Ring, etc.\n\n\nBonus\nVARCHAR\n“+1 STR”, “AC +2”, etc.\n\n\nRarity\nVARCHAR\nCommon, Rare, Legendary…\n\n\nDescription\nTEXT\nSpecial effects, flavor text\n\n\n\n\nCharacterEquipment(Weak Entity) (many-to-many):\n\ncharacterID\nEquipmentID"
  },
  {
    "objectID": "Entities.html#npc-strong-entity",
    "href": "Entities.html#npc-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "👥 NPC (Strong Entity)",
    "text": "👥 NPC (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nNPCID\nINT (PK)\nUnique NPC ID\n\n\nName\nVARCHAR\nCharacter name\n\n\nRole\nVARCHAR\nVendor, Questgiver, etc.\n\n\nFaction\nVARCHAR\nAffiliation or group\n\n\nLocation\nVARCHAR\nWhere they can be found"
  },
  {
    "objectID": "Entities.html#event-strong-entity",
    "href": "Entities.html#event-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "🎭 Event (Strong Entity)",
    "text": "🎭 Event (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nEventID\nINT (PK)\nUnique event ID\n\n\ndateEarned\nDATE\nDate Achievment Earned\n\n\nName\nVARCHAR\nEvent name\n\n\nDate\nDATE\nIn-game or real date\n\n\nDescription\nTEXT\nSummary of what occurred\n\n\n\n\ncharacterEvent(Weak Entity) (many-to-many):\n\ncharacterID\nEventID"
  },
  {
    "objectID": "Entities.html#achievement-strong-entity",
    "href": "Entities.html#achievement-strong-entity",
    "title": "COP-5725---Group-Project",
    "section": "🏆 Achievement (Strong Entity)",
    "text": "🏆 Achievement (Strong Entity)\n\n\n\nField\nType\nDescription\n\n\n\n\nAchievementID\nINT (PK)\nUnique ID\n\n\nName\nVARCHAR\n“Dragon Slayer”, etc.\n\n\nDescription\nTEXT\nHow it was earned\n\n\nXPReward\nINT\nOptional XP bonus\n\n\n\n\nPlayerAchievement(Weak Entity) (many-to-many):\n\nPlayerID\nAchievementID\n\n\n\n\nothers\n\nSales\nTrades\npotions\nweapons\nArmor\nPVP\nlocations\n\npossible quires\n\nfind what bosses character killed and get list of items from that boss he traded to another character\nfind what event(quest) gets the most exp with a sword or wand as reward that can only be used my mages and paladins"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a group project. A group may have 3 or 4 people. For this project, I would like only one submission per group. Make sure you include all participating group members, otherwise they will not get credit. Group members you can find it through Ed discussion forum. For example, you can go through the Introduce yourself page or create a thread to find group members.\nThe project is meant to bring all the concepts that you learned in this class together. So, you start off by designing the database, then you proceed to mapping and implementing it – so you go all the way from designing a database, documenting it, to implementing it in MySQL.\n\nThe project\nDesign and develop a database of your choice that includes at least:\n1. 5-7 regular strong entities.\n2. One strong and weak entities relationship 3. One supertype and subtype relationship\n4. One 1:1, one 1:M, and one M: N relationship.\n5. Other notes:\no Do not emphasize on too many attributes for the entities.\no Three to four attributes for each entity will be enough.\no Make sure to include a primary key for each entity and use foreign key wherever needed.\n\n\nPhases of the projects:\n\nPhase 1\n\n\nIdentify entities, relationships, attributes\nDesign EER diagram\n\n\nPhase 2\n\n\nInclude cardinality for relationships and attributes in EER diagram\n\nDemonstrate at least one example of strong and weak entities\nDemonstrate at least one example of supertype and subtype entities\n\n\nPhase 3\n\n\nWrite the specifications for your database (Structured English). You need to write out the specifications for only one entity.\n\nWrite out ALL the cardinalities and participation ratios (for all relationships), and explain all the strong and weak, supertype and subtype relationships.\nWrite all the column and table constraints.\n\nNormalization: Try to achieve at least 3NF design.\n\n\nPhase 4\n\n\nImplement the EER diagram into MySQL database\nCreate tables according to the mapping. For this part, submit a description of the tables created in the report.\n\nAdd at least five records. Submit a copy of all the records inserted in the report.\n\nWrite and answer some (at least five) “reasonable” queries for your database.\n\nWhen I say reasonable queries – I mean 3-4 table joins to use most of the tables or group of tables in your database. You should not have tables that are of no use. For this part, first, write the queries in English – that is, telling me what you are finding in the queries. Then, present the query and finally present the output of the query. e. Include the imported diagram using reverse engineering.\n\n\nSubmission guidelines of the projects:\n\nInclude all the group member’s name at the top in the project.\n\nOrganize the report in four phases.\n\nSubmit one PDF file including all the phases.\n\nGood Luck!!"
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nThis project was developed as part of COP 5725: Database Systems to showcase the complete process of designing and implementing a database, ie, Conceptual design, logical design, and Physical Design. We will develop a high-level viwee of the data and relationships. Translate that into a logicial model suitable for a relational database. Then finally convert the logical model into an actual database using MYSQL.\nThe focus of our team will be to build a relational database tailored to the operations of a Dungeon and Dragons ecology, encompassing areas like Player and Character records, inventory management, locations, and Bosses. We started by identifying relevant entities and their relationships, followed by crafting an Enhanced Entity-Relationship (EER) diagram that included cardinalities, strong and weak entities, and hierarchical structures like supertypes and subtypes. After applying necessary constraints and normalizing the schema to Third Normal Form (3NF), we implemented the database using MySQL, filled it with sample data, and developed advanced queries to derive valuable insights. The project concluded with a reverse-engineered ER diagram to confirm the alignment between the original design and its actual implementation."
  },
  {
    "objectID": "Phase3.html",
    "href": "Phase3.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "The Character entity is at the heart of the Dungeon and Dragons game database. Several Entities make up a full character, its stats, xp and the equipment it can wear. Characters get gear from monsters and bosses, bosses being a subtype of monsters. The Character entity has the following attributes:  CharacterID: some definition\nCharacterName: some name\n** add more stats and describe its cardinality**"
  },
  {
    "objectID": "Phase3.html#entity-specification-character-entitymichael-zeihen",
    "href": "Phase3.html#entity-specification-character-entitymichael-zeihen",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "The Character entity is at the heart of the Dungeon and Dragons game database. Several Entities make up a full character, its stats, xp and the equipment it can wear. Characters get gear from monsters and bosses, bosses being a subtype of monsters. The Character entity has the following attributes:  CharacterID: some definition\nCharacterName: some name\n** add more stats and describe its cardinality**"
  },
  {
    "objectID": "Phase3.html#relationships-structure-analysis-david-johansson",
    "href": "Phase3.html#relationships-structure-analysis-david-johansson",
    "title": "COP-5725---Group-Project",
    "section": "Relationships & Structure Analysis (David johansson)",
    "text": "Relationships & Structure Analysis (David johansson)\nList all relationships along with their cardinalities (e.g., one-to-many, many-to-many) and participation ratios (total vs. partial participation).\n\nCardinality Table (David Johansson)\n\n\n\n\n\n\n\n\nEntity\nCardinality\nDescription\n\n\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\nPlayer and Character\nOne to Many(1:N)\nMany characters are played by one character\n\n\n\n\n\nParticipation Ratio Table (David Johansson)\n\n\n\n\n\n\n\n\nEntity\nParticipation\nDescription\n\n\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\nPlayer and Character\nTotal/Manditory (1)\nMany characters are played by one character\n\n\n\n ## Identify and explain (Melanie Ortiz)\n\n\nStrong vs. weak entities\nOur database includes a variety of strong and weak entities to represent the complexity of the Dungeons & Dragons ecology.\nStrong Entities include:\nPlayer: Represents users of the system.\nCharacter: The core avatar controlled by a player.\nClass, Race, Spell, Equipment, NPC, Event, and Achievement: Each with independent existence and primary keys.\n\n\nWeak Entities include (Melanie Ortiz):\nMonster: Depends on Race and Class for full definition.\nBoss: A subtype of Monster, inheriting its attributes and adding boss-specific ones like PhaseCount and Lair.\nClassSpell: Links Class and Spell in a many-to-one relationship.\nCharacterEquipment: A many-to-many relationship between Character and Equipment.\nCharacterEvent: A many-to-many relationship between Character and Event.\nPlayerAchievement: A many-to-many relationship between Player and Achievement.\nThese weak entities rely on foreign keys and composite keys to maintain referential integrity and represent dependent relationships.\n\n\nSupertypes and subtypes with their distinguishing features. ( Melonie Ortiz)\nWe implemented a supertype-subtype relationship to model hierarchical data:\nSupertype: Monster\nSubtype: Boss\nThe Boss entity inherits all attributes from Monster (e.g., HP, AC, CR) and introduces additional attributes like PhaseCount and Lair. This structure allows us to distinguish between regular monsters and more complex boss encounters while maintaining a unified combat model."
  },
  {
    "objectID": "Phase3.html#table-column-constraints-melonie-ortiz",
    "href": "Phase3.html#table-column-constraints-melonie-ortiz",
    "title": "COP-5725---Group-Project",
    "section": "Table & Column Constraints (Melonie Ortiz)",
    "text": "Table & Column Constraints (Melonie Ortiz)\nTo ensure data integrity and enforce business rules, we applied the following constraints:\nPrimary Keys: Every entity has a unique identifier (e.g., CharacterID, PlayerID, SpellID).\nForeign Keys: Maintain relationships between entities (e.g., charClassID in Character references ClassID).\nNOT NULL: Ensures essential fields are always populated (e.g., Name, Level, XP).\nCHECK Constraints: Enforce valid ranges and logic (e.g., Level &gt;= 1, CR &gt;= 0, HP &gt;= 0).\nComposite Keys: Used in weak entities and many-to-many relationships (e.g., CharacterID + EquipmentID in CharacterEquipment).\nBoolean Constraints: For fields like Equipped in Equipment, ensuring values are either TRUE or FALSE.\nThese constraints were critical in supporting normalization, enforcing data consistency, and preparing the schema for implementation in MySQL.\n\n- Define all constraints such as:\n\n    - Primary and foreign keys\n\n    - NOT NULL requirements\n\n    - Unique constraints\n\n    - Referential integrity rules"
  },
  {
    "objectID": "Phase3.html#normalization-goals",
    "href": "Phase3.html#normalization-goals",
    "title": "COP-5725---Group-Project",
    "section": "Normalization Goals",
    "text": "Normalization Goals\nAll the tables are in 3NF. This was easily known because there were not many values inserted"
  },
  {
    "objectID": "tableSQL.html",
    "href": "tableSQL.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "CREATE TABLE Player ( PlayerID INT PRIMARY KEY,\nName VARCHAR(255),\nUserName VARCHAR(255),\nCharacterID INT,\nFOREIGN KEY (CharacterID) REFERENCES Character(CharacterID) );\nCREATE TABLE Character (\nCharacterID INT PRIMARY KEY,\nName VARCHAR(255),\nLevel INT,\nXP INT,\nHP INT,\nMana INT,\nAlignment VARCHAR(255),\ncharClassID INT,\ncharRaceID INT,\nFOREIGN KEY (charClassID) REFERENCES Class(ClassID),\nFOREIGN KEY (charRaceID) REFERENCES Race(RaceID) );\nCREATE TABLE Class (\nClassID INT PRIMARY KEY,\nClassName VARCHAR(255),\nHitDie INT,\nPrimaryStat VARCHAR(255),\nDescription TEXT );\nCREATE TABLE Race (\nRaceID INT PRIMARY KEY,\nRaceName VARCHAR(255),\nBonusStat VARCHAR(255),\nDescription TEXT\n);\nCREATE TABLE Spell (\nSpellID INT PRIMARY KEY,\nName VARCHAR(255),\nLevel INT,\nSchool VARCHAR(255),\nEffect TEXT,\nCastingTime VARCHAR(255),\nDuration VARCHAR(255)\n);\nCREATE TABLE ClassSpell (\nClassID INT,\nSpellID INT,\nPRIMARY KEY (ClassID, SpellID),\nFOREIGN KEY (ClassID) REFERENCES Class(ClassID),\nFOREIGN KEY (SpellID) REFERENCES Spell(SpellID)\n);\nCREATE TABLE Monster (\nMonsterID INT PRIMARY KEY,\nName VARCHAR(255),\nRaceID INT,\nClassID INT,\nCR FLOAT,\nHP INT,\nAC INT,\nType VARCHAR(255),\nXP INT,\nFOREIGN KEY (RaceID) REFERENCES Race(RaceID),\nFOREIGN KEY (ClassID) REFERENCES Class(ClassID)\n);\nCREATE TABLE Boss (\nBossID INT PRIMARY KEY,\nName VARCHAR(255),\nMonsterID INT,\nPhaseCount INT,\nLair VARCHAR(255),\nFOREIGN KEY (MonsterID) REFERENCES Monster(MonsterID)\n);\nCREATE TABLE Equipment (\nEquipmentID INT PRIMARY KEY,\nName VARCHAR(255),\nType VARCHAR(255),\nBonus VARCHAR(255),\nRarity VARCHAR(255),\nDescription TEXT );\nCREATE TABLE CharacterEquipment ( CharacterID INT,\nEquipmentID INT,\nPRIMARY KEY (CharacterID, EquipmentID),\nFOREIGN KEY (CharacterID) REFERENCES Character(CharacterID),\nFOREIGN KEY (EquipmentID) REFERENCES Equipment(EquipmentID)\n);\nCREATE TABLE NPC (\nNPCID INT PRIMARY KEY,\nName VARCHAR(255),\nRole VARCHAR(255),\nFaction VARCHAR(255),\nLocation VARCHAR(255)\n);\nCREATE TABLE Event (\nEventID INT PRIMARY KEY,\nName VARCHAR(255),\nDate DATE,\nDescription TEXT\n);\nCREATE TABLE CharacterEvent (\nCharacterID INT,\nEventID INT,\nPRIMARY KEY (CharacterID, EventID),\nFOREIGN KEY (CharacterID) REFERENCES Character(CharacterID),\nFOREIGN KEY (EventID) REFERENCES Event(EventID)\n);\nCREATE TABLE Achievement (\nAchievementID INT PRIMARY KEY,\nName VARCHAR(255),\nDescription TEXT,\nXPReward INT );\nCREATE TABLE PlayerAchievement ( PlayerID INT,\nAchievementID INT,\nPRIMARY KEY (PlayerID, AchievementID),\nFOREIGN KEY (PlayerID) REFERENCES Player(PlayerID),\nFOREIGN KEY (AchievementID) REFERENCES Achievement(AchievementID)\n);"
  },
  {
    "objectID": "ERD_mid_diagram.html",
    "href": "ERD_mid_diagram.html",
    "title": "ER Diagram Assignment - Invoice Management System (with Weak Entity)",
    "section": "",
    "text": "Introduction\nFor this project we are designing an Entity-Relationship (ER) diagram using Crow’s Foot notation to model a sales and invoicing system. This diagram should includea all relationship cardinalities, highlights strong and weak entities, and define suitable attributes for each one of the entities and then mark which attribute are required or optional. Additionally, primary and foreign keys are identified to in each table within the database schema.\n\n\n\n\n\nerDiagram\n    DIVISION ||--o{ DEPARTMENT : operates\n    DEPARTMENT ||--o{ EMPLOYEE : employs\n    EMPLOYEE ||--o{ PROJECT_ASSIGNMENT : assigned_to\n    PROJECT ||--o{ PROJECT_ASSIGNMENT : includes\n    EMPLOYEE ||--|| DEPARTMENT : manages\n    EMPLOYEE ||--|| DIVISION : runs\n\n    DIVISION {\n        int division_id PK \"Required\"\n        string name \"Required\"\n        int manager_id FK \"Required\"\n    }\n    DEPARTMENT {\n        int department_id PK \"Required\"\n        string name \"Required\"\n        int division_id FK \"Required\"\n        int manager_id FK \"Required\"\n    }\n    EMPLOYEE {\n        int employee_id PK \"Required\"\n        string name \"Required\"\n        string title \"Optional\"\n        int department_id FK \"Optional\"\n    }\n    PROJECT {\n        int project_id PK \"Required\"\n        string project_name \"Required\"\n    }\n    PROJECT_ASSIGNMENT {\n        int employee_id PK, FK \"Required (Composite PK)\"\n        int project_id PK, FK \"Required (Composite PK)\"\n    }"
  },
  {
    "objectID": "ERDiagram_Assignment.html",
    "href": "ERDiagram_Assignment.html",
    "title": "ER Diagram Assignment - Invoice Management System (with Weak Entity)",
    "section": "",
    "text": "For this project we are designing an Entity-Relationship (ER) diagram using Crow’s Foot notation to model a sales and invoicing system. This diagram should includea all relationship cardinalities, highlights strong and weak entities, and define suitable attributes for each one of the entities and then mark which attribute are required or optional. Additionally, primary and foreign keys are identified to in each table within the database schema.\n\n\n\n\n\nerDiagram\n    SALESREP ||--o{ INVOICE : writes\n    CUSTOMER ||--o{ INVOICE : receives\n    INVOICE ||--o{ LINE : includes\n    PRODUCT ||--o{ LINE : referenced_by\n    VENDOR ||--o{ PRODUCT : supplies\n\n    SALESREP {\n        int salesrep_id PK \"Required\"\n        string name \"Required\"\n        string email \"Optional\"\n    }\n\n    CUSTOMER {\n        int customer_id PK \"Required\"\n        string name \"Required\"\n        string phone \"Optional\"\n        string email \"Optional\"\n    }\n\n    INVOICE {\n        int invoice_id PK \"Required\"\n        date invoice_date \"Required\"\n        int salesrep_id FK \"Required\"\n        int customer_id FK \"Required\"\n    }\n\n    LINE {\n        int invoice_id PK, FK \"Required (Part of Composite PK)\"\n        int product_id PK, FK \"Required (Part of Composite PK)\"\n        int quantity \"Required\"\n        decimal price \"Required\"\n    }\n\n    PRODUCT {\n        int product_id PK \"Required\"\n        string product_name \"Required\"\n        decimal unit_price \"Required\"\n        int vendor_id FK \"Required\"\n    }\n\n    VENDOR {\n        int vendor_id PK \"Required\"\n        string vendor_name \"Required\"\n        string contact_phone \"Optional\"\n    }\n\n\n\n\n\n\n\n\n\n\nSALESREP to INVOICE: One-to-many (1:M)\nCUSTOMER to INVOICE: One-to-many (1:M)\nINVOICE to LINE: One-to-many (1:M)\n(LINE is weak and depends on INVOICE)\nPRODUCT to LINE: One-to-many (1:M)\n(Each LINE references one product)\nVENDOR to PRODUCT: One-to-many (1:M)\n\n\n\n\n\n\n\n\nEntity\nPrimary Key(s)\nForeign Key(s)\n\n\n\n\nSALESREP\nsalesrep_id\n—\n\n\nCUSTOMER\ncustomer_id\n—\n\n\nINVOICE\ninvoice_id\nsalesrep_id, customer_id\n\n\nLINE\n(invoice_id, product_id)\ninvoice_id, product_id\n\n\nPRODUCT\nproduct_id\nvendor_id\n\n\nVENDOR\nvendor_id\n—\n\n\n\n\n\n\n\n\nAll but `LINE’ is a Strong Entity\n\nEach one has its own Primary key and not composite, not leading to a dependancy\n\nLINE is a weak entity:\n\nCannot exist without an associated INVOICE and PRODUCT.\nIdentified by a composite key: (invoice_id, product_id).\nDepends on INVOICE as the owner entity."
  },
  {
    "objectID": "ERDiagram_Assignment.html#cardinalities",
    "href": "ERDiagram_Assignment.html#cardinalities",
    "title": "ER Diagram Assignment - Invoice Management System (with Weak Entity)",
    "section": "",
    "text": "SALESREP to INVOICE: One-to-many (1:M)\nCUSTOMER to INVOICE: One-to-many (1:M)\nINVOICE to LINE: One-to-many (1:M)\n(LINE is weak and depends on INVOICE)\nPRODUCT to LINE: One-to-many (1:M)\n(Each LINE references one product)\nVENDOR to PRODUCT: One-to-many (1:M)"
  },
  {
    "objectID": "ERDiagram_Assignment.html#primary-foreign-keys",
    "href": "ERDiagram_Assignment.html#primary-foreign-keys",
    "title": "ER Diagram Assignment - Invoice Management System (with Weak Entity)",
    "section": "",
    "text": "Entity\nPrimary Key(s)\nForeign Key(s)\n\n\n\n\nSALESREP\nsalesrep_id\n—\n\n\nCUSTOMER\ncustomer_id\n—\n\n\nINVOICE\ninvoice_id\nsalesrep_id, customer_id\n\n\nLINE\n(invoice_id, product_id)\ninvoice_id, product_id\n\n\nPRODUCT\nproduct_id\nvendor_id\n\n\nVENDOR\nvendor_id\n—"
  },
  {
    "objectID": "ERDiagram_Assignment.html#weak-entity-explanation",
    "href": "ERDiagram_Assignment.html#weak-entity-explanation",
    "title": "ER Diagram Assignment - Invoice Management System (with Weak Entity)",
    "section": "",
    "text": "All but `LINE’ is a Strong Entity\n\nEach one has its own Primary key and not composite, not leading to a dependancy\n\nLINE is a weak entity:\n\nCannot exist without an associated INVOICE and PRODUCT.\nIdentified by a composite key: (invoice_id, product_id).\nDepends on INVOICE as the owner entity."
  },
  {
    "objectID": "ERdiagram.html",
    "href": "ERdiagram.html",
    "title": "COP-5725---Group-Project",
    "section": "",
    "text": "Players and Characters\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    PLAYER ||--o{ PLAYER_CHARACTER : \"Has Character\"\n    CHARACTER ||--|| PLAYER_CHARACTER : \"Belongs to\"\n    CHARACTER ||--|| CLASS : \"Belongs to\"\n    CHARACTER ||--|| RACE : \"Belongs to\"\n    PLAYER ||--o{ PLAYER_Achievement : \"Earns\"\n    PLAYER_Achievement ||--o{ ACHIEVEMENT : \"Achievement\"\n\n\n\n\n\n\n\n\nCharacters and Equipment\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    CHARACTER ||--o{ CHARACTER_EQUIPMENT : \"Equips\"\n    EQUIPMENT ||--o{ CHARACTER_EQUIPMENT : \"Equipped by\"\n\n\n\n\n\n\n\n\nNPCs and World\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    NPC ||--|{ NPC_Faction : \"Belongs to\"\n    NPC ||--o{ NPC_LOCATION : \"Located in\"\n    NPC ||--|| Class : \"Has Class\"\n    NPC ||--|| Race : \"Is Race\"\n    MONSTER ||--|{ NPC : \"Is Monster\"\n    BOSS ||--|{ MONSTER : \"Is Boss\"\n\n\n\n\n\n\n\n\nSpells and Combat Events\n\n\n\n\n\n%%{init: {\"er\": {\"layoutDirection\": \"TB\"}, \"themeVariables\": {\"fontSize\": \"16px\"}}}%%\nerDiagram\n    CLASS_SPELL ||--o{ SPELL : \"Teaches\"\n    CLASS ||--o{ CLASS_SPELL : \"Has Spells\"\n    CHARACTER ||--o{ MONSTER : \"Fights\"\n    CHARACTER ||--o{ CHARACTER_EVENT : \"Participates in\"\n    EVENT ||--o{ CHARACTER_EVENT : \"Involves\"\n    NPC }o--o{ EVENT : \"Can participate\""
  }
]