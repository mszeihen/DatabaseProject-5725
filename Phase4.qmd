
## **Create Tables**



### Player Table

The Player table creates and stores the player. Each player can control a character that is identified via a name and username. 

The table is linked to the Character table through the foreign key. The table consists of the following: 


**PlayerID:** and Int identifies each player and is the primary key

**Name:** A string consists of the full name of the player

**UserName:** a string that contains the player's username. All usernames must be unique 

**CharacterID:** An int that is also a foreign key which links to the character table 

```sql

CREATE TABLE Player ( PlayerID INT PRIMARY KEY,
Name VARCHAR(255),
UserName VARCHAR(255),
CharacterID INT,
FOREIGN KEY (CharacterID) REFERENCES Character(CharacterID) );

```


### Character Table

```sql

CREATE TABLE Character (
CharacterID INT PRIMARY KEY,
Name VARCHAR(255),
Level INT,
XP INT,
HP INT,
Mana INT,
Alignment VARCHAR(255),
charClassID INT,
charRaceID INT,
FOREIGN KEY (charClassID) REFERENCES Class(ClassID),
FOREIGN KEY (charRaceID) REFERENCES Race(RaceID) )
;

```


### Class Table

The Class table is used to store different character classes that are available for players. The table consists of the following:

**ClassID:** a primary key that uniquely identifies each class available

**ClassName:** a varchar that names each class

**HitDie:** an Int that is used as a die for HP calculation

**PrimaryStat:** a VarChar that shows the main stat for each class

**Description:**  a text field providing details about each class

```sql

CREATE TABLE Class (
ClassID INT PRIMARY KEY,
ClassName VARCHAR(255),
HitDie INT,
PrimaryStat VARCHAR(255),
Description TEXT )
;

```


### Race Table

The Race table consists of data about each character's race. The table contains the following data:

**RaceID:** The primary key that uniquely identifies each available race 

**RaceName:** A varchar that names each race

**BonusStat:** a Varchar that shows the benefits of each race

**Description: **a Text field that contains contextual background information for each race.

```sql

CREATE TABLE Race (
RaceID INT PRIMARY KEY,
RaceName VARCHAR(255),
BonusStat VARCHAR(255),
Description TEXT

);

```

### Spell Table

The Spell table stores available spells and contains the following data:

**SpellID:** A primary key that uniquely identifies each spell available 

**Name:** a Varchar that contains the name of each spell

**Level:** An Int that shows the level of each spell

**School:** a Varchar indicating which magical school the spell is part of

**Effect:** a text field describing the capabilities of each spell

**CastingTime**: a Varchar that contains the duration of casting time of each spell

**Duration:** a Varchar that consists of how long the effects of the particular spell are expected to last
 
```sql

CREATE TABLE Spell (
SpellID INT PRIMARY KEY,
Name VARCHAR(255),
Level INT,
School VARCHAR(255),
Effect TEXT,
CastingTime VARCHAR(255),
Duration VARCHAR(255)

);

```


### ClassSpell Table

The ClassSpell table stores the relationship between class and spell and contains the following data: 

**ClassID:** An Int that stores what class the spell belongs to

**SpellID:** uniquely  identifies each spell.

```sql

CREATE TABLE ClassSpell (
ClassID INT,
SpellID INT,
PRIMARY KEY (ClassID, SpellID),
FOREIGN KEY (ClassID) REFERENCES Class(ClassID),
FOREIGN KEY (SpellID) REFERENCES Spell(SpellID)

);

```

### Monster Table

The Monster table stores enemy data “monster” and contains the following:

**MonsterID:** the primary key uniquely identifying each monster

**Name:** A varchar containing each monster's name

**RaceID:** the foreign key that points to Race.RaceID

**ClassID:** a foreign key which points to Class.classID

**CR: a Float that contains difficulty level

**HP:** an Int containing health 

**AC:** an Int showing armor class

**Type:** a Varchar describing class/type of monster 

**XP:** a varchar showing how much XP is given after defeating said monster. 

```sql

CREATE TABLE Monster (
MonsterID INT PRIMARY KEY,
Name VARCHAR(255),
RaceID INT,
ClassID INT,
CR FLOAT,
HP INT,
AC INT,
Type VARCHAR(255),
XP INT,
FOREIGN KEY (RaceID) REFERENCES Race(RaceID),
FOREIGN KEY (ClassID) REFERENCES Class(ClassID)
);

```

### Boss Table
The Boss contains data on different bosses encountered throughout the game.

**BossID:** The primary key uniquely identifying each boss

**Name:** a Varchar that contains the name of each boss

**MonsterID:** a foreign key pointing to Monster MonsterID

**PhaseCount:** An Int showing the level of phases a boss has

**Lair:** A Varchar for the location of each boss.


```sql

CREATE TABLE Boss (
BossID INT PRIMARY KEY,
Name VARCHAR(255),
MonsterID INT,
PhaseCount INT,
Lair VARCHAR(255),
FOREIGN KEY (MonsterID) REFERENCES Monster(MonsterID)
);

```

### Equipment Table

The Equipment table contains all items that are attainable for players in the game. It contains the following data:

**EquipmentID:** the primary key that uniquely identifies each item. 

**Name:** a Varchar that contains the name of each item

**Type:** A varchar that contains the category of item

**Bonus:** A Varchar that contains bonus items

**Rarity:** A Varchar that displays the rarity of each item

**Description:** a Text field that explains what each item is and what it does

```sql

CREATE TABLE Equipment (
EquipmentID INT PRIMARY KEY,
Name VARCHAR(255),
Type VARCHAR(255),
Bonus VARCHAR(255),
Rarity VARCHAR(255),
Description TEXT )
;

```

### CharacterEquipment Table

The CharacterEquipment table shows what equipment belongs to what character. It contains the following:

**CharactherID:** a foreign key referencing Character.CharactherID

**EquipmentID:** a foreign key referencing Characther.CharactherID 


```sql

CREATE TABLE CharacterEquipment ( CharacterID INT,
EquipmentID INT,
PRIMARY KEY (CharacterID, EquipmentID),
FOREIGN KEY (CharacterID) REFERENCES Character(CharacterID),
FOREIGN KEY (EquipmentID) REFERENCES Equipment(EquipmentID)
);

```


### NPC Table

The NPC table contains the non-playable characters present in the game. It contains the following data:

**NPCID:** the primary key uniquely identifying each NPC

**Name:** a Varchar containing the name of each NPC

**Role:** A Varchar displaying the role of each NPC such as guard, merchant etc.

**Faction:** the “guild” each NPC belongs to

**Location:** The location of each NPC
 
```sql

CREATE TABLE NPC (
NPCID INT PRIMARY KEY,
Name VARCHAR(255),
Role VARCHAR(255),
Faction VARCHAR(255),
Location VARCHAR(255)
);

```

### Event Table

The Event table tracks all events in the game. It contains the following data:

**EventID:** The primary key uniquely identifying each event.

**Name:** a Varchar which names each event

**Date:** a Date which shows when the event occurred

**Description:** A text field explaining the event that occurred.

```sql

CREATE TABLE Event (
EventID INT PRIMARY KEY,
Name VARCHAR(255),
Date DATE,
Description TEXT
);

```

### CharacterEvent Table

The CharacterEvent table stores all events specific players have participated in. It contains the following:

**CharacterID:** a foreign key referencing character.charactherID

**EventID:** a foreign key referencing    EventID 

```sql

CREATE TABLE CharacterEvent (
CharacterID INT,
EventID INT,
PRIMARY KEY (CharacterID, EventID),
FOREIGN KEY (CharacterID) REFERENCES Character(CharacterID),
FOREIGN KEY (EventID) REFERENCES Event(EventID)
);

```


### Achievement Table

The Achievement table stores all achievements players can accomplish throughout the game. It contains the following:

**AchievementID:** The primary key uniquely identifying each achievement 

**Name:** a Varchar that names each achievement 

**Description:** A text field that describes how players can earn said achievement  

**XPReward:** An Int which shows the experience awarded for each achievement 


```sql

CREATE TABLE Achievement (
AchievementID INT PRIMARY KEY,
Name VARCHAR(255),
Description TEXT,
XPReward INT 
);

```

### PlayerAchievement Table

The PlayerAchievement table stores data referencing which player has been able to complete which achievement. It contains the following:

**PlayerID:** A foreign key referencing Player.PlayerID

**AchievementID:** A foreign key  referencing Achievement.AchievementID
 
```sql

CREATE TABLE PlayerAchievement ( PlayerID INT,
AchievementID INT,
PRIMARY KEY (PlayerID, AchievementID),
FOREIGN KEY (PlayerID) REFERENCES Player(PlayerID),
FOREIGN KEY (AchievementID) REFERENCES Achievement(AchievementID)
);

```




## **Insert Sample Data**

Below are the initial dataset entries for key entities in the game database.

### Race Table
```sql
    INSERT IGNORE INTO Race (RaceID) VALUES (301);
    INSERT IGNORE INTO Race (RaceID) VALUES (303);
    INSERT IGNORE INTO Race (RaceID) VALUES (304);
    INSERT IGNORE INTO Race (RaceID) VALUES (305);
```  

### Class Table
```sql
    INSERT IGNORE INTO Class (ClassID) VALUES (201);
    INSERT IGNORE INTO Class (ClassID) VALUES (202);
    INSERT IGNORE INTO Class (ClassID) VALUES (203);
    INSERT IGNORE INTO Class (ClassID) VALUES (204);
```

### Player Table
```sql
    INSERT IGNORE INTO Player (PlayerID, Name) VALUES (101, 'Arin');
    INSERT IGNORE INTO Player (PlayerID, Name) VALUES (102, 'Brenna');
    INSERT IGNORE INTO Player (PlayerID, Name) VALUES (103, 'Cedric');
    INSERT IGNORE INTO Player (PlayerID, Name) VALUES (104, 'Daria');
    INSERT IGNORE INTO Player (PlayerID, Name) VALUES (105, 'Elandor');
```

### Character Table
```sql
    INSERT IGNORE INTO Character (CharacterID, Name, Level) VALUES (501, 'worf', 10);
    INSERT IGNORE INTO Character (CharacterID, Name, Level) VALUES (502, 'creeger', 12);
    INSERT IGNORE INTO Character (CharacterID, Name, Level) VALUES (503, 'fendal', 15);
    INSERT IGNORE INTO Character (CharacterID, Name, Level) VALUES (504, 'dar', 8);
    INSERT IGNORE INTO Character (CharacterID, Name, Level) VALUES (505, 'edlor', 20);
```

### PlayerCharacter Table
```sql
    INSERT IGNORE INTO PlayerCharacter (CharacterID, PlayerID) VALUES (501,  101);
    INSERT IGNORE INTO PlayerCharacter (CharacterID, PlayerID) VALUES (502,  102);
    INSERT IGNORE INTO PlayerCharacter (CharacterID, PlayerID) VALUES (503,  103);
    INSERT IGNORE INTO PlayerCharacter (CharacterID, PlayerID) VALUES (504,  104);
    INSERT IGNORE INTO PlayerCharacter (CharacterID, PlayerID) VALUES (505,  105);
```
### Equipment Table
```sql
    INSERT IGNORE INTO Equipment (EquipmentID, Name, Type, Bonus, Rarity, Description, Equipped )
    VALUES (894, 'Longsword of Valor', 'Weapon', '+2 ATK', 'Rare', 'A shining blade blessed by paladins.', TRUE);
    INSERT IGNORE INTO Equipment (EquipmentID, Name, Type, Bonus, Rarity, Description, Equipped)
    VALUES (847, 'Cloak of Shadows', 'Armor', '+1 STEALTH', 'Uncommon', 'Blends with the darkness.', TRUE);
    INSERT IGNORE INTO Equipment (EquipmentID, Name, Type, Bonus, Rarity, Description, Equipped)
    VALUES (857, 'Ring of Fire', 'Accessory', '+1 FIRE DMG', 'Rare', 'Grants control over flame.', TRUE);
    INSERT IGNORE INTO Equipment (EquipmentID, Name, Type, Bonus, Rarity, Description, Equipped)
    VALUES (820, 'Boots of Haste', 'Armor', '+10 SPEED', 'Rare', 'Doubles movement speed.', TRUE);
    INSERT IGNORE INTO Equipment (EquipmentID, Name, Type, Bonus, Rarity, Description, Equipped)
    VALUES (869, 'Amulet of Vitality', 'Accessory', '+15 HP', 'Epic', 'Boosts health significantly.', TRUE);
```

### CharacterEquipment Table
```sql
    INSERT IGNORE INTO CharacterEquipment (CharacterID, EquipmentID) VALUES (501, 894);
    INSERT IGNORE INTO CharacterEquipment (CharacterID, EquipmentID) VALUES (502, 847);
    INSERT IGNORE INTO CharacterEquipment (CharacterID, EquipmentID) VALUES (503, 857);
    INSERT IGNORE INTO CharacterEquipment (CharacterID, EquipmentID) VALUES (504, 820);
    INSERT IGNORE INTO CharacterEquipment (CharacterID, EquipmentID) VALUES (505, 869);
```

### Monster Table
```sql
    INSERT IGNORE INTO Monster (MonsterID, Name, RaceID, ClassID, CR, HP, AC, Type, XP)
    VALUES (647, 'Goblin Brute', 303, 201, 0.25, 22, 15, 'Beast', 100);
    INSERT IGNORE INTO Monster (MonsterID, Name, RaceID, ClassID, CR, HP, AC, Type, XP)
    VALUES (650, 'Fire Imp', 304, 202, 0.5, 18, 13, 'Fiend', 150);
    INSERT IGNORE INTO Monster (MonsterID, Name, RaceID, ClassID, CR, HP, AC, Type, XP)
    VALUES (626, 'Skeleton Archer', 303, 203, 0.75, 30, 12, 'Undead', 200);
    INSERT IGNORE INTO Monster (MonsterID, Name, RaceID, ClassID, CR, HP, AC, Type, XP)
    VALUES (635, 'Bandit Captain', 301, 201, 1.5, 60, 16, 'Humanoid', 450);
    INSERT IGNORE INTO Monster (MonsterID, Name, RaceID, ClassID, CR, HP, AC, Type, XP)
    VALUES (637, 'Dark Druid', 305, 204, 2.0, 75, 14, 'Caster', 600);
```

### Boss Table
```sql
    INSERT IGNORE INTO Boss (BossID, Name, MonsterID, PhaseCount, Lair)
    VALUES (751, 'Goroth the Devourer', 637, 3, 'Ashen Caverns');
    INSERT IGNORE INTO Boss (BossID, Name, MonsterID, PhaseCount, Lair)
    VALUES (733, 'Zeriel the Flameborn', 650, 2, 'Crimson Tower');
    INSERT IGNORE INTO Boss (BossID, Name, MonsterID, PhaseCount, Lair)
    VALUES (735, 'Thornshade', 626, 1, 'Whispering Woods');
    INSERT IGNORE INTO Boss (BossID, Name, MonsterID, PhaseCount, Lair)
    VALUES (746, 'Valkor Doomhammer', 647, 2, 'Broken Citadel');
    INSERT IGNORE INTO Boss (BossID, Name, MonsterID, PhaseCount, Lair)
    VALUES (729, 'Morwenna the Hollow', 635, 4, 'Eclipsed Sanctum');
```

### NPC Table
```sql
    INSERT IGNORE INTO NPC (NPCID, Name, Role, Faction, Location)
    VALUES (904, 'Marcus Ironshield', 'Blacksmith', 'Steelguard', 'Forge Town');
    INSERT IGNORE INTO NPC (NPCID, Name, Role, Faction, Location)
    VALUES (993, 'Selene Moonwhisper', 'Merchant', 'Silver Circle', 'Elaria Market');
    INSERT IGNORE INTO NPC (NPCID, Name, Role, Faction, Location)
    VALUES (987, 'Thaddeus Grin', 'Guard', 'Crimson Watch', 'North Gate');
    INSERT IGNORE INTO NPC (NPCID, Name, Role, Faction, Location)
    VALUES (964, 'Lira Sunpetal', 'Healer', 'Verdant Grove', 'Sacred Glade');
    INSERT IGNORE INTO NPC (NPCID, Name, Role, Faction, Location)
    VALUES (984, 'Drogath Stonefist', 'Trainer', 'Stoneclaw Clan', 'Battle Arena');
```

### Event Table
```sql
    INSERT IGNORE INTO Event (EventID, Name, Date, Description, Type)
    VALUES (1063, 'Battle of Emberfall', '2024-05-12', 'The city was nearly razed by flame elementals.', 'Battle');
    INSERT IGNORE INTO Event (EventID, Name, Date, Description, Type)
    VALUES (1090, 'Siege of Thornkeep', '2024-06-23', 'A brutal 3-day battle against undead forces.', 'Battle');
    INSERT IGNORE INTO Event (EventID, Name, Date, Description, Type)
    VALUES (1057, 'Festival of Light', '2024-07-15', 'Celebration of the gods’ blessings.', 'Festival');
    INSERT IGNORE INTO Event (EventID, Name, Date, Description, Type)
    VALUES (1087, 'Rogue Uprising', '2024-08-02', 'Thieves guild attacked the capital.', 'Quest');
    INSERT IGNORE INTO Event (EventID, Name, Date, Description, Type)
    VALUES (1004, 'Mystic Eclipse', '2024-09-30', 'A magical event altering mana flows.', 'Quest');
```
### CharacterEvent Table
```sql
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID) VALUES (501, 1063);
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID) VALUES (502, 1090);
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID) VALUES (503, 1057);
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID) VALUES (504, 1087);
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID) VALUES (505, 1004);
```

### Achievement Table
```sql
    INSERT IGNORE INTO Achievement (AchievementID, Name, Description, XPReward)
    VALUES (1130, 'First Blood', 'Defeat your first enemy.', 100);
    INSERT IGNORE INTO Achievement (AchievementID, Name, Description, XPReward)
    VALUES (1143, 'Explorer', 'Visit 10 unique locations.', 250);
    INSERT IGNORE INTO Achievement (AchievementID, Name, Description, XPReward)
    VALUES (1193, 'Elite Slayer', 'Defeat an elite monster.', 500);
    INSERT IGNORE INTO Achievement (AchievementID, Name, Description, XPReward)
    VALUES (1160, 'Master of Magic', 'Learn 10 spells.', 400);
    INSERT IGNORE INTO Achievement (AchievementID, Name, Description, XPReward)
    VALUES (1116, 'Hero of the Realm', 'Complete the main questline.', 1000);
```

### PlayerAchievement Table
```sql
    INSERT IGNORE INTO PlayerAchievement (PlayerID, AchievementID) VALUES (101, 1130);
    INSERT IGNORE INTO PlayerAchievement (PlayerID, AchievementID) VALUES (102, 1143);
    INSERT IGNORE INTO PlayerAchievement (PlayerID, AchievementID) VALUES (103, 1193);
    INSERT IGNORE INTO PlayerAchievement (PlayerID, AchievementID) VALUES (104, 1160);
    INSERT IGNORE INTO PlayerAchievement (PlayerID, AchievementID) VALUES (105, 1116);
```

### CharacterEvent Table
```sql
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID, Result) VALUES (501, 1063, 'Won');
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID, Result) VALUES (502, 1063, 'Won');
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID, Result) VALUES (503, 1063, 'Lost');
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID, Result) VALUES (504, 1063, 'Lost');
    INSERT IGNORE INTO CharacterEvent (CharacterID, EventID, Result) VALUES (505, 1063, 'Lost');
```
 ### Spell Table
```sql
    INSERT INTO Spell (SpellID, Name, Level, School, Effect, CastingTime, Duration) VALUES
    (401, 'Fireball', 3, 'Evocation', 'Deals fire damage in a 20-foot radius.', '1 action', 'Instantaneous'),
    (402, 'Cure Wounds', 1, 'Evocation', 'Heals a target creature.', '1 action', 'Instantaneous'),
    (403, 'Mage Armor', 1, 'Abjuration', 'Gives +3 AC to a creature without armor.', '1 action', '8 hours'),
    (404, 'Invisibility', 2, 'Illusion', 'Makes a creature invisible.', '1 action', 'Up to 1 hour'),
    (405, 'Shield', 1, 'Abjuration', 'Gives +5 AC until start of your next turn.', '1 reaction', '1 round');
    """,
```   
### ClassSpell
```sql
    INSERT INTO ClassSpell (ClassID, SpellID) VALUES
    (201, 401),  
    (202, 402),  
    (201, 403),  
    (203, 404),  
    (204, 405); 
 ```

## **Write & Execute Complex Queries**


### Lists all Characters with their class, race, and equiment


This query generates and retrieves various information about all characters and equipment they currently possess. It displays class and race combined with equipment data. It can be used to get a general status update on the player in regards to how they have advanced throughout the game. 


```sql
    SELECT 
        c.Name AS CharacterName,
        e.Name AS EquipmentName,
        e.Type,
        e.Bonus,
        e.Rarity
    FROM 
        `Character` c
    JOIN 
        CharacterEquipment ce ON c.CharacterID = ce.CharacterID
    JOIN 
        Equipment e ON ce.EquipmentID = e.EquipmentID
    WHERE 
        e.Equipped = TRUE
    ORDER BY c.Name;
```

|CharacterName|	EquipmentName|	Type|	Bonus|	Rarity|
|--------------|-------------|--------|------|---------|
|worf|	Longsword of Valor|	Weapon	|+2 ATK|	Rare
|creeger|	Cloak of Shadows|	Armor|	+1 STEALTH	|Uncommon
|fendal|	Ring of Fire|	Accessory|	+1 FIRE DMG	|Rare
|dar|	Boots of Haste	|Armor	|+10 SPEED	|Rare
|edlor|	Amulet of Vitality	|Accessory|	+15 HP	|Epic

### Finds all spells available to a character 

```sql
   SELECT 
       s.Name AS SpellName,
       s.Level,
       s.School,
       s.CastingTime,
       s.Duration
   FROM 
       ClassSpell cs
   JOIN 
       Class cl ON cs.ClassID = cl.ClassID
   JOIN 
       Spell s ON cs.SpellID = s.SpellID
   ORDER BY 
       cl.ClassName, s.Level;
```

| SpellName | Level | School | Effect | CastingTime | Duration|
|-----------|--------|---------|--------|--------|---------|
|Mage Armor     | 1    |   Abjuration   |   1 action    |    8 hours|
|Cure Wounds    1      | Evocation   |    1 action      |  Instantaneous|
|Shield  | 1      | Abjuration    |  1 reaction  |    1 round|
|Invisibility   | 2    |   Illusion     |   1 action   |     Up to 1 hour|
|Fireball       | 3     |  Evocation    |   1 action     |   Instantaneous  |                


### Lists all players and what events they have participated in.

```sql
    SELECT
        p.UserName,
        c.Name AS CharacterName,
         e.Name AS EventName,
        e.Date AS EventDate
    FROM Player p
    JOIN PlayerCharacter pc ON p.PlayerID = pc.PlayerID
    JOIN Character c ON pc.CharacterID = c.CharacterID
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    ORDER BY p.UserName, e.Date DESC;
```

|PlayerName     |	EventName  |	EventDate  |
|---------------|--------------|---------------|
|Arin	|  Battle of Emberfall  | 2024-05-12   |
|Brenna	|  Siege of Thornkeep   | 2024-06-23   |
|Cedric	|  Festival of Light    | 2024-07-15   |
|Daria	|  Rogue Uprising	|2024-08-02|
|Elandor|	Mystic Eclipse	|2024-09-30|     

### Average level of XP per class

```sql
    SELECT
        cl.ClassName,
        AVG(c.Level) AS AvgLevel,
        SUM(c.XP) AS TotalXP
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    GROUP BY cl.ClassName
    ORDER BY AvgLevel DESC;
```

|ClassName	|AvgLevel|	TotalXP|
|-----------|--------|---------|
|Mage	|18.5 |	12500|
|Fighter	|12.0 |	7200|
|Rogue	|7.5	|3900|


### won battles by character

```sql
    SELECT
        c.Name AS CharacterName,
        COUNT(DISTINCT e.EventID) AS BattlesWon
    FROM Character c
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    WHERE e.Type = 'Battle'
    AND e.Result = 'Won'
    GROUP BY c.Name
    ORDER BY BattlesWon DESC;

```
|CharacterName	|EventName	|EventDate|
|-----------|--------|---------|
|worf	|Battle of Emberfall	|2024-05-12|
|creeger	|Battle of Emberfall	|2024-05-12|

## **Show Reverse-Engineered Diagram**

  ![Reverse Engineering Diagram From Python](images/erd_output.png)

