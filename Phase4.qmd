
## **Create Tables (David Jacob)**

<font color="red">

  - Map each entity and relationship to proper tables.

  - Document the schema details in your report.
</font>

<font color="green">

**THis is an example for table creations
and associated documentation**

  CREATE TABLE Plant (
    PlantID SMALLINT UNSIGNED PRIMARY KEY,
    PlantName VARCHAR (50) NOT NULL,
    PlantLocation VARCHAR (50) NOT NULL,
    OperationStatus VARCHAR (50) NOT NULL
  );

Table Description
This table stores basic information about individual plants, such as their name, location, and currentoperational status.

PlantID: A small unsigned integer that uniquely identifies a plant. This is theprimary keyof the table,meaning each PlantID must be unique and non-null. As it's UNSIGNED, it can only store positive values (0to 65,535).

PlantName: A variable-length string (up to 50 characters) representing the name of the plant. This field ismarked NOT NULL, so every plant must have a name.

PlantLocation: A variable-length string (up to 50 characters) that indicates the physical or geographicallocation of the plant. This is also a NOT NULL field, meaning each plant must have a known location.

OperationStatus: A variable-length string (up to 50 characters) indicating the current operational state ofthe plant. This field is also NOT NULL.
The table doesnotcurrently include any foreign keys, but it could be linked to other tables (like companyregions or statuses) depending on how the broader database is designed. There are no duplicate rules orrelational constraints in this version beyond the primary key on PlantID.

</font>
## **Insert Sample Data (David Jacob)**

<font color="green">

**This is an example of Values being added to associated table**

  INSERT INTO Plant

    VALUES(100, "Sagali", "Texas", "Mining"),

          (200, "Tema", "Atlanta", "Refinery"),

          (300, "Mashda", "New York", "Cannary"),

          (400, "Segal", "Washington", "Mixer"),

          (500, "Pinto", "Pensacola", "Grinder");

</font>

<font color="red">

  - Populate each table with at least five records.

  - Include a snapshot of the data entries in your submission.

</font>

## **Write & Execute Complex Queries(David Jacob)**

(Formulate and run at least five meaningful SQL queries that involve 3–4 table joins.)

<font color="red">

* Ensure all tables are actively used—none should be redundant.

* For each query:

     + **Describe the goal in plain English**

     + Show the SQL code.

     + **Present the query results** - NOTE will add after init_database.py is completed

</font>

### Lists all Characters with their class, race, and equiment


<font color="green">

Need a reason or story for the use of this query: i.e.

quote from demo paper

"
A customer reported that his company fired him for purchasing a bad product from us. The qualitycontrol manager analysed the situation and suggested the product might have been produced usingmaterials of less time life. Hence, we want to find all products and their related materials producedfor this situation.
"

</font>

```
    SELECT 
        c.Name AS CharacterName,
        cl.ClassName,
        r.RaceName,
        e.Name AS EquipmentName,
        e.Type AS EquipmentType,
        e.Bonus
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    JOIN Race r ON c.charRaceID = r.RaceID
    JOIN CharacterEquipment ce ON c.CharacterID = ce.CharacterID
    JOIN Equipment e ON ce.EquipmentID = e.EquipmentID
    WHERE e.Equipped = TRUE
    ORDER BY c.Name, e.Name;
```

| CharacterName | ClassName | RaceName |EquipmentName | EquipmentType  | Bonus                         |
|---------------|-----------|----------|--------------|----------------|-------------------------------|
| name 1        |  wizard   | High elf | Blight caller| sword          |None                           |

### Finds all spells available to a character 

```
    SELECT 
        c.Name AS CharacterName,
        cl.ClassName,
        s.Name AS SpellName,
        s.Level,
        s.School
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    JOIN ClassSpell cs ON cl.ClassID = cs.ClassID
    JOIN Spell s ON cs.SpellID = s.SpellID
    ORDER BY c.Name, s.Level;
```

| CharacterName | ClassName | SpellName |Level | school     |
|---------------|-----------|-----------|------|------------|
| name 1        |  wizard   | Fire ball |  5 | Fire         |                  


### Lists all players and what events they have participated in.

```
    SELECT
        p.UserName,
        c.Name AS CharacterName,
         e.Name AS EventName,
        e.Date AS EventDate
    FROM Player p
    JOIN PlayerCharacter pc ON p.PlayerID = pc.PlayerID
    JOIN Character c ON pc.CharacterID = c.CharacterID
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    ORDER BY p.UserName, e.Date DESC;
```

| UserName | CharacterName |EventName |EventDate |
|----------|-----------|-----------------------|---------------|
| Michael  |  Parzival | "The Great Key Chase" |  '2025-01-01' |      

### Average level of XP per class

```
    SELECT
        cl.ClassName,
        AVG(c.Level) AS AvgLevel,
        SUM(c.XP) AS TotalXP
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    GROUP BY cl.ClassName
    ORDER BY AvgLevel DESC;
```

### won battles by character

```
    SELECT
        c.Name AS CharacterName,
        COUNT(DISTINCT e.EventID) AS BattlesWon
    FROM Character c
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    WHERE e.Type = 'Battle'
    AND e.Result = 'Won'
    GROUP BY c.Name
    ORDER BY BattlesWon DESC;

```

## **Show Reverse-Engineered Diagram (Michael Zeihen) **

  - Use reverse engineering to visualize the implemented schema.

  - Add the generated ER diagram to your report to confirm alignment between design and implementation.

