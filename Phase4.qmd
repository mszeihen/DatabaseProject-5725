
## **Create Tables (David Jacob)**

<font color="red">

  - Map each entity and relationship to proper tables.

  - Document the schema details in your report.
</font>

## **Insert Sample Data (David Jacob)**

<font color="red">

  - Populate each table with at least five records.

  - Include a snapshot of the data entries in your submission.

</font>

## **Write & Execute Complex Queries(David Jacob)**

(Formulate and run at least five meaningful SQL queries that involve 3–4 table joins.)

### Lists all Characters with their class, race, and equiment

<font color="red">
* Ensure all tables are actively used—none should be redundant.

* For each query:

     + **Describe the goal in plain English.**

     + Show the SQL code.

     + ** Present the query results.** - NOTE will add after init_database.py is completed

</font>

```
    SELECT 
        c.Name AS CharacterName,
        cl.ClassName,
        r.RaceName,
        e.Name AS EquipmentName,
        e.Type AS EquipmentType,
        e.Bonus
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    JOIN Race r ON c.charRaceID = r.RaceID
    JOIN CharacterEquipment ce ON c.CharacterID = ce.CharacterID
    JOIN Equipment e ON ce.EquipmentID = e.EquipmentID
    WHERE e.Equipped = TRUE
    ORDER BY c.Name, e.Name;
```

### Finds all spells available to a character 

```
    SELECT 
        c.Name AS CharacterName,
        cl.ClassName,
        s.Name AS SpellName,
        s.Level,
        s.School
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    JOIN ClassSpell cs ON cl.ClassID = cs.ClassID
    JOIN Spell s ON cs.SpellID = s.SpellID
    ORDER BY c.Name, s.Level;
```

### Lists all players and what events they have participated in.

```
    SELECT
        p.UserName,
        c.Name AS CharacterName,
         e.Name AS EventName,
        e.Date AS EventDate
    FROM Player p
    JOIN PlayerCharacter pc ON p.PlayerID = pc.PlayerID
    JOIN Character c ON pc.CharacterID = c.CharacterID
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    ORDER BY p.UserName, e.Date DESC;
```

### Average level of XP per class

```
    SELECT
        cl.ClassName,
        AVG(c.Level) AS AvgLevel,
        SUM(c.XP) AS TotalXP
    FROM Character c
    JOIN Class cl ON c.charClassID = cl.ClassID
    GROUP BY cl.ClassName
    ORDER BY AvgLevel DESC;
```

### won battles by character

```
    SELECT
        c.Name AS CharacterName,
        COUNT(DISTINCT e.EventID) AS BattlesWon
    FROM Character c
    JOIN CharacterEvent ce ON c.CharacterID = ce.CharacterID
    JOIN Event e ON ce.EventID = e.EventID
    WHERE e.Type = 'Battle'
    AND e.Result = 'Won'
    GROUP BY c.Name
    ORDER BY BattlesWon DESC;

```

## **Show Reverse-Engineered Diagram (Michael Zeihen) **

  - Use reverse engineering to visualize the implemented schema.

  - Add the generated ER diagram to your report to confirm alignment between design and implementation.

