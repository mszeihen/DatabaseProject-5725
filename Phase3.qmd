## **Entity Specification (Character Entity)(Michael Zeihen)**

The Character entity is at the heart of the Dungeon and Dragons game database. Several Entities make up a full character, its stats, xp and the equipment it can wear. Characters get gear from monsters and bosses, bosses being a subtype of monsters. The Character entity has the following attributes:
<font color="red">
**CharacterID:** some definition

**CharacterName:** some name

** add more stats and describe its cardinality**
</font>

<font color="red">

## **Relationships & Structure Analysis (David johansson)**

List all relationships along with their cardinalities (e.g., one-to-many, many-to-many) and participation ratios (total vs. partial participation).


### Cardinality Table (David Johansson)

| Entity                  | Cardinality       | Description                                            |
|-------------------------|-------------------|--------------------------------------------------------|
| Player and Character    | One to Many(1:N)  | Many characters are played by one character            |
| Player and Character    | One to Many(1:N)  | Many characters are played by one character            |
| Player and Character    | One to Many(1:N)  | Many characters are played by one character            |
| Player and Character    | One to Many(1:N)  | Many characters are played by one character            |


### Participation Ratio Table (David Johansson)  

| Entity                  | Participation        | Description                                             |
|-------------------------|----------------------|---------------------------------------------------------|
| Player and Character    | Total/Manditory (1)  | Many characters are played by one character             |
| Player and Character    | Total/Manditory (1)  | Many characters are played by one character             |     
| Player and Character    | Total/Manditory (1)  | Many characters are played by one character             |     
| Player and Character    | Total/Manditory (1)  | Many characters are played by one character             |     

</font>
## **Identify and explain (Melanie Ortiz)**

### Strong vs. weak entities

Our database includes a variety of strong and weak entities to represent the complexity of the Dungeons & Dragons ecology.

Strong Entities include:

**Player:** Represents users of the system.

**Character:** The core avatar controlled by a player.

Class, Race, Spell, Equipment, NPC, Event, and Achievement: Each with independent existence and primary keys.

### Weak Entities include (Melanie Ortiz):

**Monster:** Depends on Race and Class for full definition.

**Boss:** A subtype of Monster, inheriting its attributes and adding boss-specific ones like PhaseCount and Lair.

**ClassSpell:** Links Class and Spell in a many-to-one relationship.

**CharacterEquipment:** A many-to-many relationship between Character and Equipment.

**CharacterEvent:** A many-to-many relationship between Character and Event.

**PlayerAchievement:** A many-to-many relationship between Player and Achievement.

These weak entities rely on foreign keys and composite keys to maintain referential integrity and represent dependent relationships.


### Supertypes and subtypes with their distinguishing features. ( Melonie Ortiz

We implemented a supertype-subtype relationship to model hierarchical data:
Supertype: Monster

Subtype: Boss

The Boss entity inherits all attributes from Monster (e.g., HP, AC, CR) and introduces additional attributes like PhaseCount and Lair. 
This structure allows us to distinguish between regular monsters and more complex boss encounters while maintaining a unified combat model.

## **Table & Column Constraints (Melonie Ortiz)**

To ensure data integrity and enforce business rules, we applied the following constraints:

**Primary Keys:** Every entity has a unique identifier (e.g., CharacterID, PlayerID, SpellID).

**Foreign Keys:** Maintain relationships between entities (e.g., charClassID in Character references ClassID).

**NOT NULL:** Ensures essential fields are always populated (e.g., Name, Level, XP).

**CHECK Constraints:** Enforce valid ranges and logic (e.g., Level >= 1, CR >= 0, HP >= 0).

**Composite Keys:** Used in weak entities and many-to-many relationships (e.g., CharacterID + EquipmentID in CharacterEquipment).

**Boolean Constraints:** For fields like Equipped in Equipment, ensuring values are either TRUE or FALSE.

These constraints were critical in supporting normalization, enforcing data consistency, and preparing the schema for implementation in MySQL.

Ok. Now that is the correct info.

<font color="red">
    - Define all constraints such as:

        - Primary and foreign keys

        - NOT NULL requirements

        - Unique constraints

        - Referential integrity rules

</font>
## **Normalization Goals (Up fro grabs atm)**
<font color="red">

    - Restructure tables and attributes to achieve Third Normal Form (3NF):

    - Eliminate redundancy

    - Ensure dependencies are logical and efficient

    - Avoid update anomalies
</font>
